// Generated by Dagger (https://dagger.dev).
package mostafa.projects.doctorjobs.Modules;

import androidx.fragment.app.FragmentActivity;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import homedoctor.viewmodel.HomeDoctorViewModel;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class Settings_ProvideViewModelFactory implements Factory<HomeDoctorViewModel> {
  private final Settings module;

  private final Provider<FragmentActivity> activityProvider;

  public Settings_ProvideViewModelFactory(Settings module,
      Provider<FragmentActivity> activityProvider) {
    this.module = module;
    this.activityProvider = activityProvider;
  }

  @Override
  public HomeDoctorViewModel get() {
    return provideViewModel(module, activityProvider.get());
  }

  public static Settings_ProvideViewModelFactory create(Settings module,
      Provider<FragmentActivity> activityProvider) {
    return new Settings_ProvideViewModelFactory(module, activityProvider);
  }

  public static HomeDoctorViewModel provideViewModel(Settings instance, FragmentActivity activity) {
    return Preconditions.checkNotNull(instance.provideViewModel(activity), "Cannot return null from a non-@Nullable @Provides method");
  }
}
